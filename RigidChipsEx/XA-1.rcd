// [RCD] 
Val
{
	AB(default=0, min=-90, max=90)
	AGAP1(default=0, min=-10000000000, max=10000000000)
	AGAP2(default=0, min=-10000000000, max=10000000000)
	AGAP3(default=0, min=-10000000000, max=10000000000)
	AGAP4(default=0, min=-10000000000, max=10000000000)
	AGAP5(default=0, min=-10000000000, max=10000000000)
	AGAP6(default=0, min=-10000000000, max=10000000000)
	AGAP7(default=0, min=-10000000000, max=10000000000)
	AGAP8(default=0, min=-10000000000, max=10000000000)
	AGJP1(default=0, min=-10000000000, max=10000000000)
	AGJP2(default=0, min=-10000000000, max=10000000000)
	AGJP3(default=0, min=-10000000000, max=10000000000)
	AGJP4(default=0, min=-10000000000, max=10000000000)
	AGJP5(default=0, min=-10000000000, max=10000000000)
	AGJP6(default=0, min=-10000000000, max=10000000000)
	AGJP7(default=0, min=-10000000000, max=10000000000)
	AGJP8(default=0, min=-10000000000, max=10000000000)
	AGXP1(default=0, min=-10000000000, max=10000000000)
	AGXP2(default=0, min=-10000000000, max=10000000000)
	AGXP3(default=0, min=-10000000000, max=10000000000)
	AGXP4(default=0, min=-10000000000, max=10000000000)
	AGXP5(default=0, min=-10000000000, max=10000000000)
	AGXP6(default=0, min=-10000000000, max=10000000000)
	AGXP7(default=0, min=-10000000000, max=10000000000)
	AGXP8(default=0, min=-10000000000, max=10000000000)
	AGYP1(default=0, min=-10000000000, max=10000000000)
	AGYP2(default=0, min=-10000000000, max=10000000000)
	AGYP3(default=0, min=-10000000000, max=10000000000)
	AGYP4(default=0, min=-10000000000, max=10000000000)
	AGYP5(default=0, min=-10000000000, max=10000000000)
	AGYP6(default=0, min=-10000000000, max=10000000000)
	AGYP7(default=0, min=-10000000000, max=10000000000)
	AGYP8(default=0, min=-10000000000, max=10000000000)
	G0(default=0, max=10000000000)
	G1(default=0, max=10000000000)
	G2(default=0, max=10000000000)
	G3(default=0, max=10000000000)
	GF(default=0, min=-180, max=180)
	GR(default=0, min=-180, max=180)
	JX(default=0, min=-90, max=90)
	JY(default=0, min=-90, max=90)
	MA1(default=0, max=10000000000, step=10000000000)
	MA2(default=0, max=10000000000, step=10000000000)
	MP1(default=0, min=-10000000000, max=10000000000)
	MP2(default=0, min=-10000000000, max=10000000000)
	MX1(default=0, min=-90, max=90)
	MX2(default=0, min=-90, max=90)
	MY1(default=0, min=-90, max=90)
	MY2(default=0, min=-90, max=90)
	MZ1(default=0, min=-10000000000, max=10000000000)
	MZ2(default=0, min=-10000000000, max=10000000000)
	P(default=0, min=-10000000000, max=10000000000)
	R(default=0, min=-90, max=90)
	RD(default=0, min=-90, max=90)
	V(default=0, min=-90, max=90)
	V0(default=0, min=-90, max=90)
	V1(default=0, min=-90, max=90)
	V2(default=0, min=-90, max=90)
	V3(default=0, min=-90, max=90)
}
Key
{
}
Body
{
	Core() {
		W:Cowl(option=1, effect=#F0FB, name=LS) { }
		E:Cowl(option=1, effect=#F0FB, name=RS) { }
		S:Cowl(option=1, effect=#F0FB, name=TS) { }
		N:Cowl(option=1, effect=#F0FB, name=FS) { }
		S:TrimF(angle=180, option=1, spring=1, damper=1, name=CRE) {
			N:Frame(angle=-V0) {
				N:Arm(option=50000, power=G0, angle=V0, name=A0) { }
			}
			N:Frame(angle=-V1) {
				N:Arm(option=50000, power=G1, angle=V1, name=A1) { }
			}
			N:Frame(angle=-V2) {
				N:Arm(option=50000, power=G2, angle=V2, name=A2) { }
			}
			N:Frame(angle=-V3) {
				N:Arm(option=50000, power=G3, angle=V3, name=A3) { }
			}
		}
		S:Weight(angle=180, option=8) { }
		S:TrimF(angle=180, spring=1, damper=1) {
			E:TrimF(angle=180) {
				E:Chip(angle=0, name=MC2) {
					N:Chip(angle=MY2) { }
					N:Frame(angle=-150, option=1) {
						N:Jet(angle=-120, power=-MP2) { }
					}
					S:Arm(power=MA2, option=100000, name=MG2) {
						N:Trim(angle=90) {
							N:Chip(angle=MX2) { }
						}
					}
					W:Trim(angle=MZ2) { }
					E:Trim(angle=MZ2) { }
				}
			}
			W:TrimF(angle=0) {
				W:Chip(angle=0, name=MC1) {
					S:Chip(angle=MY1) { }
					S:Frame(angle=-150, option=1) {
						S:Jet(angle=-120, power=-MP1) { }
					}
					N:Arm(power=MA1, option=100000, name=MG1) {
						S:Trim(angle=90) {
							S:Chip(angle=MX1) { }
						}
					}
					W:Trim(angle=MZ1) { }
					E:Trim(angle=MZ1) { }
				}
			}
			W:Weight(angle=20, option=2) {
				W:Chip(angle=160) {
					E:Trim(angle=R) { }
				}
				S:Frame(option=1, name=AGSC1) {
					N:RLW(angle=180, power=AGYP1, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP1, brake=200000) { }
					}
					N:Arm(power=AGAP1, option=1000000, name=AGAC1) { }
					S:Frame(angle=150, option=1) {
						S:Jet(angle=120, power=AGJP1) { }
					}
				}
				S:Frame(option=1, name=AGSC3) {
					N:RLW(angle=180, power=AGYP3, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP3, brake=200000) { }
					}
					N:Arm(power=AGAP3, option=1000000, name=AGAC3) { }
					S:Frame(angle=150, option=1) {
						S:Jet(angle=120, power=AGJP3) { }
					}
				}
				S:Frame(option=1, name=AGSC5) {
					N:RLW(angle=180, power=AGYP5, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP5, brake=200000) { }
					}
					N:Arm(power=AGAP5, option=1000000, name=AGAC5) { }
					S:Frame(angle=150, option=1) {
						S:Jet(angle=120, power=AGJP5) { }
					}
				}
				S:Frame(option=1, name=AGSC7) {
					N:RLW(angle=180, power=AGYP7, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP7, brake=200000) { }
					}
					N:Arm(power=AGAP7, option=1000000, name=AGAC7) { }
					S:Frame(angle=150, option=1) {
						S:Jet(angle=120, power=AGJP7) { }
					}
				}
				N:Weight(option=8) { }
			}
			E:Weight(angle=20, option=2) {
				E:Chip(angle=160) {
					W:Trim(angle=R) { }
				}
				S:Frame(option=1, name=AGSC2) {
					N:RLW(angle=180, power=AGYP2, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP2, brake=200000) { }
					}
					N:Arm(power=AGAP2, option=1000000, name=AGAC2) { }
					S:Frame(angle=-150, option=1) {
						S:Jet(angle=-120, power=-AGJP2) { }
					}
				}
				S:Frame(option=1, name=AGSC4) {
					N:RLW(angle=180, power=AGYP4, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP4, brake=200000) { }
					}
					N:Arm(power=AGAP4, option=1000000, name=AGAC4) { }
					S:Frame(angle=-150, option=1) {
						S:Jet(angle=-120, power=-AGJP4) { }
					}
				}
				S:Frame(option=1, name=AGSC6) {
					N:RLW(angle=180, power=AGYP6, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP6, brake=200000) { }
					}
					N:Arm(power=AGAP6, option=1000000, name=AGAC6) { }
					S:Frame(angle=-150, option=1) {
						S:Jet(angle=-120, power=-AGJP6) { }
					}
				}
				S:Frame(option=1, name=AGSC8) {
					N:RLW(angle=180, power=AGYP8, brake=200000) { }
					S:TrimF(angle=90, option=1) {
						N:RLW(power=AGXP8, brake=200000) { }
					}
					N:Arm(power=AGAP8, option=1000000, name=AGAC8) { }
					S:Frame(angle=-150, option=1) {
						S:Jet(angle=-120, power=-AGJP8) { }
					}
				}
				N:Weight(option=8) { }
			}
		}
		S:Trim(angle=-90, spring=1, damper=1) {
			S:Chip(option=1, spring=1, damper=1) {
				S:TrimF(angle=-90) {
					E:Frame(angle=20) {
						E:Frame(angle=160, option=1) {
							W:Trim(angle=V) {
								E:Chip() { }
							}
							W:Frame(option=1) { }
						}
					}
					W:Frame(angle=20) {
						W:Frame(angle=160, option=1) {
							E:Trim(angle=-V) {
								W:Chip() { }
							}
							E:Frame(option=1) { }
						}
					}
				}
				S:Chip() { }
				W:Rudder(angle=-90) {
					E:Chip() { }
					W:Chip() { }
				}
			}
			N:Jet(angle=90, power=P) { }
			N:Jet(angle=-90, power=-P) { }
			N:Chip() { }
		}
	}
}
Lua
{
require("daretoku_taka/xgui.lua")
require("daretoku_taka/xhud.lua")
require("daretoku_taka/libccvx2.lua")

__agc_ntp={0,0,0,0,0,0,0,0}
__agc_enable={false,false,false,false,false,false,false,false}
__agc_timer={0,0,0,0,0,0,0,0}
__agc_count=8
__agc_mdl={1,1,1,1,1,1,1,1}

X_PID = {XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new()}
Y_PID = {XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new(),XPID_new()}

function OnFrameAGC()
	for i=1,__agc_count do
		local agsc=_G['AGSC'..i]
		local agac=_G['AGAC'..i]
		
		out(1+i,string.format("%d%%",_E(agac)/_OPTION(agac)*100))
		
		if __agc_enable[i] then
			local nx,ny,nz=_X(agsc),_Y(agsc),_Z(agsc)
			local ax,ay,az=_VX(agsc),_VY(agsc),_VZ(agsc)
			
			local x,y,z=nx+ax/30,ny+ay/30,nz+az/30
			
			local xx,xy,xz=_XX(agsc),_XY(agsc),_XZ(agsc)
			local yx,yy,yz=_YX(agsc),_YY(agsc),_YZ(agsc)
			local zx,zy,zz=_ZX(agsc),_ZY(agsc),_ZZ(agsc)
			local tx,ty,tz=_NPOS(__agc_ntp[i])
			local vx,vy,vz=_NORMAL3(tx-x,ty-y,tz-z)
			
			local dx = vx-zx
			local dy = vy-zy
			local dz = vz-zz
			
			local xa = (xx * dx + xy * dy + xz * dz)
			local ya = (yx * dx + yy * dy + yz * dz)
			
			_G['AGYP'..i]=X_PID[i]:PID(xa,0,200000,100000,100000,1000000)*__agc_mdl[i]
			_G['AGXP'..i]=Y_PID[i]:PID(ya,0,200000,100000,100000,1000000)
			
			if _E(agac) == _OPTION(agac) and __agc_timer[i] == 0 then
				_G['AGAP'..i] = _OPTION(agac)
				_G['AGJP'..i] = _OPTION(agac)
			else
				_G['AGAP'..i] = 0
				_G['AGJP'..i] = 0
			end
			
			if __agc_timer[i] > 0 then __agc_timer[i] = __agc_timer[i] - 1 end
		end
	end
end

_mn = 2
_mdl = {1,-1}
_ntp = {0,0}

_gtp=0

_prvtbl = InitPRVTable()

_prvtbl.p.limit = 400000
_prvtbl.p.step  = 200000

_prvtbl.r.tgt = 180
_prvtbl.r.kp  = 8
_prvtbl.r.ki  = 16
_prvtbl.r.kd  = 4
_prvtbl.r.il  = 30

_prvtbl.v.tgt = 45
_prvtbl.v.kp  = 8
_prvtbl.v.ki  = 16
_prvtbl.v.kd  = 4
_prvtbl.v.il  = 60

JX_PID = XPID_new()
JY_PID = XPID_new()
WS_PID = XPID_new()
RD_PID = XPID_new()

_gf=20
_gr=70

vx1=0
vy1=0
vz1=0

_x=_X()
_y=_Y()
_z=_Z()

function _ROTATE(px,py,pr)
	return px * math.cos(pr) - py * math.sin(pr), px * math.sin(pr) + py * math.cos(pr)
end

function _RETICL(x0,y0,z0,s0)
	_MOVE3D(x0+s0,y0,z0)
	_LINE3D(x0,y0+s0,z0)
	_LINE3D(x0-s0,y0,z0)
	_LINE3D(x0,y0-s0,z0)
	_LINE3D(x0+s0,y0,z0)
	
	_MOVE3D(x0+s0,y0,z0)
	_LINE3D(x0,y0,z0+s0)
	_LINE3D(x0-s0,y0,z0)
	_LINE3D(x0,y0,z0-s0)
	_LINE3D(x0+s0,y0,z0)
	
	_MOVE3D(x0,y0+s0,z0)
	_LINE3D(x0,y0,z0+s0)
	_LINE3D(x0,y0-s0,z0)
	_LINE3D(x0,y0,z0-s0)
	_LINE3D(x0,y0+s0,z0)
end

function CalcGTP(inc,dec)
	_gtp = math.mod(_gtp+inc-dec,_PLAYERS())
	if _gtp < 0 then _gtp = _PLAYERS()-1 end
end

gx,gy,gz=0,0,0

function GTPView()
	local x0,y0,z0=_NPOS(_gtp)
	local x1,y1,z1=_X(CRE)+_ZX(CRE)*1.2,_Y(CRE)+_ZY(CRE)*1.2,_Z(CRE)+_ZZ(CRE)*1.2
	
	local vx,vy,vz=x0-gx,y0-gy,z0-gz
	
	local i=_LEN3(x0-x1,y0-y1,z0-z1)/20
	
	local xt,yt,zt=x0+vx*i,y0+vy*i,z0+vz*i
	
	local ishit = RaySphereAAM(x1,y1,z1,_ZX(CRE),_ZY(CRE),_ZZ(CRE),x0,y0,z0,0.3)
	
	if ishit then
		XGUI.SetDrawColorRGB(0,255,0)
		XGUI.SetStringPosition(_WIDTH()/2+x,_HEIGHT()/2+y)
		XGUI.DrawVectorStringCenter("SHOOT")
	end
	
	gx,gy,gz=x0,y0,z0
end

function CheckLimitEx()
	_slim=500
	
	if _md == 1 then
		_slim=550
	end
	
	if _md == 2 then
		_slim=600
	end
	
	if _md == 3 then
		_slim=650
	end
	
	if _md == 4 then
		_slim=700
	end
	
	if _md == 5 then
		_slim=800
	end
	
	if _VEL()*3.6 > _slim then P = (_slim-_VEL()*3.6)*2500 end
	
	_md = _md+_KEYDOWN(8)-_KEYDOWN(10)
	if _md < 0 then _md = 5 end
	if _md > 5 then _md = 0 end
end

__agc_next=0

function OnFrame()
	CCVXOnFrame(true)

	ShowSplash("XF-3 Phantom")
	
	if not _inited then
		InitAAM(AAM_Callback)
		_inited = true
	end
	
	if _KEYDOWN(1) == 1 then
		EnableAAM()
	end
	
	CalcNTP(1,_KEYDOWN(6)*_KEY(0),0)
	CalcNTP(2,_KEYDOWN(7)*_KEY(0),0)
	
	--CalcGTP(_KEYDOWN(4),_KEYDOWN(5))
	
	__agc_ntp[1+__agc_next] = _ntp[1]
	__agc_ntp[2+__agc_next] = _ntp[2]
	
	if _KEYDOWN(4) == 1 then
		local agsc1=_G['AGSC'..(__agc_next+1)]
		local agsc2=_G['AGSC'..(__agc_next+2)]
		
		__agc_enable[1+__agc_next] = true
		__agc_enable[2+__agc_next] = true
		__agc_timer[1+__agc_next] = 90
		__agc_timer[2+__agc_next] = 90
		_SPLIT(agsc1)
		_SPLIT(agsc2)
		
		__agc_next = __agc_next + 2
	end
	
	local i = _mn+1
	
	--XGUI.SetStringPosition(288,64-24+24*i)
	--XGUI.DrawVectorString(string.format("GTP %d %s",_gtp,_PLAYERNAME(_gtp)))
	
	_RAMIEL3D(_NPOS(_ntp[1]))
	_RAMIEL3D(_NPOS(_ntp[2]))
	
	--GTPView()
	
	MoveAAM()
	
	OnFrameAGC()
	
	local p,r,v = GetPRVAnalog(_prvtbl)
	
	P=p
	R=r
	V=v
	
	local vx=(_X()-_x)*30
	local vy=(_Y()-_y)*30
	local vz=(_Z()-_z)*30
	
	local x=(vx-vx1)*30*_YX()
	local y=(vy-vy1)*30*_YY()
	local z=(vz-vz1)*30*_YZ()
	
	local g=(x+y+z)/9.8
	
	_x=_X()
	_y=_Y()
	_z=_Z()
	
	vx1=vx
	vy1=vy
	vz1=vz
	
	out(0,g)
	
	local dv = math.rad(-_NORMANALOG(1)*180/30)
	local dy = math.rad((_KEY(5)-_KEY(4))*60/30)
	
	if _gf == 0 then dy = dy * 2 end
	
	JX = JX_PID:PID(dv,WX,24,16,2,40)
	JY = JY_PID:PID(dy,WY,24,16,2,40)
	RD = RD_PID:PID(dy,WY,24,16,2,40)
	WS = WS_PID:PID(dy,WY,24,16,2,40)
	
	local ab = _NORMANALOG(5)
	if ab > 0 then ab = 0 end
	
	AB=_LINER(AB,ab*60,30)
	
	CheckLimitEx()
	
	XHUD.Draw()
end
}
